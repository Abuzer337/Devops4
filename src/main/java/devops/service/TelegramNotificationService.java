package devops.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.StringHttpMessageConverter;
import java.nio.charset.StandardCharsets;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Service
public class TelegramNotificationService {
    
    private static final Logger log = LoggerFactory.getLogger(TelegramNotificationService.class);
    
    @Value("${telegram.bot.token:}")
    private String botToken;
    
    @Value("${telegram.chat.id:}")
    private String chatId;
    
    private final RestTemplate restTemplate;
    
    public TelegramNotificationService() {
        this.restTemplate = new RestTemplate();
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 –¥–ª—è RestTemplate
        StringHttpMessageConverter stringConverter = new StringHttpMessageConverter(StandardCharsets.UTF_8);
        stringConverter.setWriteAcceptCharset(false);
        this.restTemplate.getMessageConverters().add(0, stringConverter);
    }
    
    public void sendMessage(String message) {
        if (botToken.isEmpty() || chatId.isEmpty()) {
            log.warn("Telegram bot not configured. Skipping notification: {}", message);
            return;
        }
        
        String url = "https://api.telegram.org/bot" + botToken + "/sendMessage";
        
        Map<String, Object> payload = new HashMap<>();
        payload.put("chat_id", chatId);
        payload.put("text", message);
        payload.put("parse_mode", "HTML");
        payload.put("disable_web_page_preview", true);
        
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.set("Accept-Charset", "UTF-8");
            
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(payload, headers);
            ResponseEntity<String> response = restTemplate.postForEntity(url, request, String.class);
            
            if (response.getStatusCode().is2xxSuccessful()) {
                log.info("Telegram notification sent successfully");
            } else {
                log.error("Failed to send Telegram notification: {}", response.getBody());
            }
        } catch (Exception e) {
            log.error("Error sending Telegram notification", e);
        }
    }
    
    public void sendCarNotification(String action, String brand, Date year) {
        String yearStr = year != null ? String.valueOf(year.getYear() + 1900) : "–ù–µ —É–∫–∞–∑–∞–Ω";
        String timeStr = LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
        String message = String.format(
            "üöó <b>%s</b>\n" +
            "–î–µ–π—Å—Ç–≤–∏–µ: %s\n" +
            "–ú–∞—Ä–∫–∞: %s\n" +
            "–ì–æ–¥: %s\n" +
            "–í—Ä–µ–º—è: %s",
            action, action, brand, yearStr, timeStr
        );
        sendMessage(message);
    }
    
    public void sendHandlingNotification(String action, String carBrand, String description) {
        String message = String.format(
            "üîß <b>%s</b>\n" +
            "–î–µ–π—Å—Ç–≤–∏–µ: %s\n" +
            "–ê–≤—Ç–æ–º–æ–±–∏–ª—å: %s\n" +
            "–û–ø–∏—Å–∞–Ω–∏–µ: %s\n" +
            "–í—Ä–µ–º—è: %s",
            action, action, carBrand, description,
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
        );
        sendMessage(message);
    }
    
    public void sendNotificationAlert(String action, String message) {
        String notification = String.format(
            "üîî <b>%s</b>\n" +
            "–î–µ–π—Å—Ç–≤–∏–µ: %s\n" +
            "–°–æ–æ–±—â–µ–Ω–∏–µ: %s\n" +
            "–í—Ä–µ–º—è: %s",
            action, action, message,
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
        );
        sendMessage(notification);
    }
    
    public void sendSystemStatus(String status, String details) {
        String emoji = status.equals("SUCCESS") ? "‚úÖ" : "‚ùå";
        String fixedDetails = fixEncoding(details);
        String message = String.format(
            "%s <b>–°–∏—Å—Ç–µ–º–∞: %s</b>\n" +
            "–î–µ—Ç–∞–ª–∏: %s\n" +
            "–í—Ä–µ–º—è: %s",
            emoji, status, fixedDetails,
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
        );
        sendMessage(message);
    }
    
    public void sendCICDNotification(String status, String buildNumber, String details) {
        String emoji = status.equals("SUCCESS") ? "üöÄ" : "üí•";
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        String fixedDetails = fixEncoding(details);
        
        String message = String.format(
            "%s <b>CI/CD Pipeline</b>\n" +
            "–°—Ç–∞—Ç—É—Å: %s\n" +
            "–°–±–æ—Ä–∫–∞: #%s\n" +
            "–î–µ—Ç–∞–ª–∏: %s\n" +
            "–í—Ä–µ–º—è: %s",
            emoji, status, buildNumber, fixedDetails,
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"))
        );
        sendMessage(message);
    }
    
    private String fixEncoding(String text) {
        if (text == null) return "";
        
        System.out.println("Original text: " + text);
        System.out.println("Original bytes: " + java.util.Arrays.toString(text.getBytes()));
        
        try {
            // –°–ø–æ—Å–æ–± 1: ISO-8859-1 -> UTF-8
            byte[] bytes1 = text.getBytes("ISO-8859-1");
            String result1 = new String(bytes1, "UTF-8");
            System.out.println("Method 1 result: " + result1);
            
            // –°–ø–æ—Å–æ–± 2: Windows-1251 -> UTF-8
            byte[] bytes2 = text.getBytes("Windows-1251");
            String result2 = new String(bytes2, "UTF-8");
            System.out.println("Method 2 result: " + result2);
            
            // –°–ø–æ—Å–æ–± 3: –£–º–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            String result3 = restoreRussianText(text);
            System.out.println("Method 3 result: " + result3);
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–æ–¥–∞ 3 (–ø—Ä—è–º–∞—è –∑–∞–º–µ–Ω–∞), –µ—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–∏–∫–∏
            if (text.matches(".*\\?.*") && !text.matches(".*[–∞-—è—ë–ê-–Ø–Å].*")) {
                return result3;
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–æ–¥–∞ 1, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
            if (result1.matches(".*[–∞-—è—ë].*")) {
                return result1;
            }
            
            // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            return text;
            
        } catch (Exception e) {
            System.out.println("Encoding fix failed: " + e.getMessage());
            return text;
        }
    }
    
    private String restoreRussianText(String text) {
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        // –≠—Ç–æ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≥–æ, –∫–∞–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        String[] russianWords = {
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–∫–æ–¥–∏—Ä–æ–≤–∫–∏", "UTF-8", "–¢–µ–ø–µ—Ä—å", "—Ä—É—Å—Å–∫–∏–µ", 
            "–±—É–∫–≤—ã", "–¥–æ–ª–∂–Ω—ã", "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è", "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–±–µ–∑", "–≤–æ–ø—Ä–æ—Å–∏–∫–æ–≤"
        };
        
        // –ü—Ä–æ—Å—Ç–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        String result = text;
        result = result.replace("????????????", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
        result = result.replace("???????????", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
        result = result.replace("?????????", "–∫–æ–¥–∏—Ä–æ–≤–∫–∏");
        result = result.replace("??????", "–¢–µ–ø–µ—Ä—å");
        result = result.replace("??????", "—Ä—É—Å—Å–∫–∏–µ");
        result = result.replace("?????", "–±—É–∫–≤—ã");
        result = result.replace("??????", "–¥–æ–ª–∂–Ω—ã");
        result = result.replace("???????????", "–æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è");
        result = result.replace("?????????", "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        result = result.replace("???", "–±–µ–∑");
        result = result.replace("?????????", "–≤–æ–ø—Ä–æ—Å–∏–∫–æ–≤");
        
        return result;
    }
}
